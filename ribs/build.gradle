plugins {
    id 'kotlin-multiplatform' version '1.3.11'
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

group 'com.example'

version '0.0.1'

kotlin {
    targets {
        fromPreset(presets.jvm, 'android')
        // This preset is for iPhone emulator
        // Switch here to presets.iosArm64 to build library for iPhone device
        fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                compileOnly files("${findSdkLocation()}/platforms/android-28/android.jar")
            }
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iosMain {
        }
        iosTest {
        }
    }
}

configurations {
    compileClasspath
}

File findSdkLocation() {
    def rootDir = project.rootDir
    def androidSdkDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDirProp = properties.getProperty('sdk.dir')
        if (sdkDirProp != null) {
            androidSdkDir = new File(sdkDirProp)
        } else {
            sdkDirProp = properties.getProperty('android.dir')
            if (sdkDirProp != null) {
                androidSdkDir = new File(rootDir, sdkDirProp)
                isPlatformSdk = true
            } else {
                throw new RuntimeException(
                        "No sdk.dir property defined in local.properties file.")
            }
        }
    } else {
        String envVar = System.getenv("ANDROID_HOME")
        if (envVar != null) {
            androidSdkDir = new File(envVar)
        } else {
            String property = System.getProperty("android.home")
            if (property != null) {
                androidSdkDir = new File(property)
            }
        }
    }
    return androidSdkDir
}